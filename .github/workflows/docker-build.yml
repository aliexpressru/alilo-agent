name: 🐳 Build and Push Docker Image

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      registry:
        description: 'Docker Registry'
        required: true
        default: 'ghcr.io'
        type: choice
        options:
        - ghcr.io
        - docker.io
      image_name:
        description: 'Image name'
        required: true
        default: 'alilo-agent'
      tag:
        description: 'Image tag'
        required: true
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: alilo-agent

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔍 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    # Trivy security scan disabled per request

    - name: 🐳 Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: 📋 Image digest
      run: |
        echo "Image digest: ${{ steps.build.outputs.digest }}"

    - name: 🏷️ Image tags
      run: |
        echo "Image tags: ${{ steps.meta.outputs.tags }}"

  test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐳 Run container tests
      run: |
        # Запускаем контейнер
        docker run -d --name test-container -p 8888:8888 \
          ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
        
        # Ждем запуска
        sleep 10
        
        # Проверяем API
        curl -f http://localhost:8888/api/v1/getStatus || exit 1
        
        # Очищаем
        docker stop test-container && docker rm test-container

  notify:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: always() && github.event_name != 'pull_request'

    steps:
    - name: 📧 Notify on success
      if: needs.build.result == 'success' && needs.test.result == 'success'
      run: |
        echo "✅ Docker image built and pushed successfully!"
        echo "Image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}"
        echo "Tags: ${{ needs.build.outputs.tags }}"

    - name: 📧 Notify on failure
      if: needs.build.result == 'failure' || needs.test.result == 'failure'
      run: |
        echo "❌ Docker build failed!"
        echo "Build result: ${{ needs.build.result }}"
        echo "Test result: ${{ needs.test.result }}"
